name: Build and Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [windows, darwin, linux]
        goarch: [arm64, amd64]
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Build Java with Maven
        run: |
          mvn package
        shell: bash

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1.22'

      - name: Build Go Binary
        working-directory: ./jbs-client
        run: |
          EXT=""
          if [ "${{ matrix.goos }}" == "windows" ]; then
            EXT=".exe"
          fi
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o jbs-client-${{ matrix.goos }}-${{ matrix.goarch }}$EXT
        shell: bash

      - name: Archive Production Artifacts
        run: |
          zip -r release-${{ matrix.goos }}-${{ matrix.goarch }}.zip target/*.jar jbs-client/jbs-client-${{ matrix.goos }}-${{ matrix.goarch }}*
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          path: release-${{ matrix.goos }}-${{ matrix.goarch }}.zip

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          dir: ${{ github.repository }}
        run: |
          cd $dir
          for zipfile in *.zip; do
            if [[ -f "$zipfile" ]]; then
              echo "Uploading $zipfile"
              curl \
                -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: $(file -b --mime-type "$zipfile")" \
                --data-binary @"$zipfile" \
                "${{ steps.create_release.outputs.upload_url }}?name=$(basename "$zipfile")"
            fi
          done
